openapi: 3.0.1
info:
  title: GenKwiz API
  description: Interactive quizzing API with questions of multiple engrossing genres.
  contact:
    name: Shriram Deshpande
    url: 'http://genkwiz.com'
    email: deshpandeshriram@gmail.com
  license:
    name: API License
    url: 'http://genkwiz.com'
  version: 0.0.2
servers:
  - url: 'http://localhost:8080/genkwiz/v1'
tags:
  - name: quiz-controller
    description: Quiz Controller
          
paths:
  /login:
    post:
      tags:
        - login-controller
      description: 'Register new user and returns the session Id.'
      operationId: createSession
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostLoginRequest'
      responses:
        '201':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      sessionId:
                        description: >-
                          Session Id created for user.
                        type: string
                        format: uuid
                        example: '88267634-d8fe-11eb-b8bc-0242ac130003'
            
        '400':
          description: Bad Request
        '404':
          description: 'If provided avatar Id does not exist.'
          content: {}
        '500':
          description: Internal Server Error
          content: {}
            

  /quizzes:
    post:
      tags:
        - quiz-controller
      description: >-
        Creates the quiz with mode and genre opted by the user and returns the Quiz Id.
      operationId: createQuiz
      parameters:
        - $ref: '#/components/parameters/SessionId'
      
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostQuizRequest'
              
      responses:
        '201':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      quizId:
                        description: Id of the quiz generated.
                        type: string
                        format: uuid
                  
          links:
            GetQuizByQuizId:
              description: >-
                The 'quizId' value returned in the response can be used as the
                'quizId' parameter in 'GET /quizzes/{quizId}'.
              operationId: getQuiz
              parameters:
                quizId: $response.body#/quizId
            
        '400':
          description: Bad Request 
        '401':
          description: Unauthorized
          content: {}
        '403':
          description: Forbidden
          content: {}
        '404':
          description: Not Found
          content: {}
        '500':
          description: Internal Server Error
          content: {}
          
  '/quizzes/{quizId}':
    get:
      tags:
        - quiz-controller
      description: >-
        'Fetch static details of the questions of the quiz generated.  Questions, hints and other components of the questions, which are stored on server.'
      operationId: getQuizQuestions
      parameters:
        - $ref: '#/components/parameters/SessionId'
        - name: quizId
          in: path
          description: Id returned on quiz formation which is now used to fetch quiz.
          required: true
          schema:
            type: string
            format: uuid
        - name: startingAt
          in: query
          description: >-
            The serial number of the quiz's question of whose static information
            is to be fetched.
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuizStaticData'
        '401':
          description: Unauthorized
          content: {}
        '403':
          description: Forbidden
          content: {}
        '404':
          description: Not Found
          content: {}
      deprecated: false
   
  '/quizzes/{quizId}/answers/{serialNumber}':
    post:
      tags:
        - quiz-controller
      description: Submit the user's answer and display the correct answer.
      operationId: submitAnswer
      parameters:
        - $ref: '#/components/parameters/SessionId'
        - name: quizId
          in: path
          description: Id of the quiz currently being played.
          required: true
          schema:
            type: string
            format: uuid
        - name: serialNumber
          in: path
          description: Serial number of question whose answer is to be submitted.
          required: true
          schema:
            type: integer
        
      requestBody:
          description: Details of attempted question 
          required: true
          content:
           application/json:
            schema:
              $ref: '#/components/schemas/PostAnswer'
               
      responses:
        '201':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - id
                  - data
                properties:
                  id:
                    type: string
                    description: Id of the Quiz
                  data:
                    $ref : '#/components/schemas/QuestionStatus'  
         
        '400':
          description: Bad Request 
        '401':
          description: Unauthorized
          content: {}
        '403':
          description: Forbidden
          content: {}
        '404':
          description: Not Found
          content: {}
        '500':
          description: Internal Server Error
          content: {} 
          
  '/quizzes/{quizId}/status':
    get:
      tags:
        - quiz-controller
      description: >-
        Fetch dynamic components of the quiz like status of the quiz,time,score
        etc.
      operationId: fetchQuizStatus
      parameters:
        - $ref: '#/components/parameters/SessionId'
        - name: quizId
          in: path
          description: >-
            Id returned on quiz formation which is now used to fetch quiz details.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '201':
          description: successful operation
          content:
            application/json:
              schema:
                 $ref : '#/components/schemas/QuizStatus'  
        '400':
          description: Bad Request on invalid quizId
        '401':
          description: Unauthorized
          content: {}
        '403':
          description: Forbidden
          content: {}
        '404':
          description: Not Found
          content: {}
        '500':
          description: Internal Server Error
          content: {} 
          
  '/quizzes/{quizId}/submit':
    post:
      tags:
        - quiz-controller
      description: Get performance of Entire Quiz.
      operationId: SubmitFinalPerformance
      parameters:
        - $ref: '#/components/parameters/SessionId'
        - name: quizId
          in: path
          description: Id of the quiz played.
          required: true
          schema:
            type: string
            format: uuid
        
      responses:
        '201':
          description: successful operation
          content:
            application/json:
              schema:
                 $ref: '#/components/schemas/Performance'
                    
 
        '400':
          description: Bad Request 
        '401':
          description: Unauthorized
          content: {}
        '403':
          description: Forbidden
          content: {}
        '404':
          description: Not Found
          content: {}
        '500':
          description: Internal Server Error
          content: {} 
  
components:
  schemas:
    PostLoginRequest:
      type: object
      required:
        - username
      properties:
        username:
          type: string
          description: 'Name of the user'
          example: 'Krishna Bharat'
        avatarId:
          type: string
          description:  'Id of the avatar selected by user.'
          example: 10
    
    PostQuizRequest:
      type: object
      required:
        - data
      properties:
        data:
          type: object
          required:
            - genre
            - mode
          properties:
            genre:
              type: string
              description: 'Genre of the quiz, Politics, Sports.'
              example: Politics
            mode:
              type: string
              description: 'Mode of the questions in the quiz.'
              enum :
                - Easy
                - Medium
                - Hard
              example: Easy
            numberOfQuestion:
              type: integer
              description: 'Total number of questions in the quiz.'
              minimum: 3
              maximum: 10
              default: 10
              
    QuizStaticData:
      title: Quiz
      type: object
      properties:
       quizId:
         type: string
         format: uuid
       data:
        type: object
        properties:
         questions:
          type: array
          items:
           $ref: '#/components/schemas/Question'

    Question:
      title: Question
      type: object
      properties:
        mode:
          $ref: '#/components/schemas/Mode'
        genre:
          type: string
        id:
          description: question id required to fetch answer in 'Answer'.
          type: integer
          format: int32
        text:
          type: string
        rating:
          type: number
          format: float
        type:
          type: string
        hints:
         type: array
         items:
           $ref: '#/components/schemas/Hint'

    Hint:
      title: Hint
      type: object
      properties:
        questionId:
          type: integer
          format: int32
          description: 'Question Id'
        hintNumber:
          type: integer
          format: int32
          description: 'Hint number'
        text:
          type: string
        marksDeduction:
          type: integer
          format: int32
          
    QuizStatus:
      type: object
      required:
        - id
      properties:
        id:
          type: string
          description: Id of the Quiz
        data:
          type: array
          items:
            $ref: '#/components/schemas/QuestionStatus'
            
    PostAnswer:
      type: object
      required:
      - data
      properties:
        data:
          type: object
          required:
            - userTime
            - userAnswer
          properties:
            userTime:
              type: integer
              description: 'Time take by the user to answer this question in seconds'
            hintsUsed:
              type: integer
            status:
              $ref: '#/components/schemas/QuestionState'
            userAnswer:
              type: string
            typeOfQuestion:
              type: string 
          
    QuestionStatus:
      title: Question Status
      type: object
      properties:
        userAnswer:
          type: string
          description: User's question response.
        userTime:
          type: integer
          description: 'Time take by the user to answer this question in seconds.'
          example: 45
        hintsUsed:
          type: integer
          description: 'Number of hints used by user.'
        score:
          type: integer
          description: 'Obtained score by the user. It depnds on questions actual score and hints used.'
        status:
          $ref: '#/components/schemas/QuestionState'
        correct:
          type: boolean
          description: 'true if user provided answer is correct.'
        serialNumber:
          type: integer
          description: 'Serial number of the question in the Quiz.'
          
    Mode:
      title: Mode
      type: object
      description: 'Quiz mode seleted by the user'
      properties:
        name:
          type: string
          description: 'Name of the mode.'
        maxScore:
          type: integer
          format: int32
          description: 'Maximum score of the mode.'
        maxTime:
          type: integer
          description: 'Max time to solve any question in this mode in seconds.'
          example: 120
              
        
    Performance:
      title: Performance
      type: object
      properties:
        data:
          type: object
          properties:
            numberOfCorrect:
              type: integer
              format: int32 
            quizId:
              type: integer
              format: int32  
            numberOfAttempted:
              type: integer
              format: int32
            totalTime:
              type: integer
              format: int32
            finalScore:
              type: integer
              format: int32
              
    
    QuestionState:
      title: Question State
      type: string
      description: State of the question in the quiz.
      enum:
        - not_attempted
        - attempted
        - skipped
        
  parameters:
    SessionId:
      in: header
      name: 'x-genkwiz-session-id'
      schema:
        type: string
      required: true
      example: '9e409206-d8f9-11eb-b8bc-0242ac130003'
